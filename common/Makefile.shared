##########################################################
# Repo Setup
#

# shared code repository
SHARED = common

# the BLAST configuration project
BLASTCONF = blast_config

# the BLAST data project
BLASTETC = blast_etc

# the MiniCP configuration project
MINICONF = minicp_config

# the Spider configuration project
SPIDERCONF = spider_config

# the Spider data project
SPIDERETC = spider_etc

# figure out which repos we have (we get SHARED for free)

##########################################################
# Figure out which repositories we need
#

ifeq ($(strip $(BLAST_OR_SPIDER)),1)
	USING_BLASTCONF=1
	USING_SPIDERCONF=1
	NEED_CONF=1
else
ifeq ($(strip $(SPIDER_OR_BLAST)),1)
	USING_BLASTCONF=1
	USING_SPIDERCONF=1
	NEED_CONF=1
else
ifeq ($(strip $(SPIDER_ONLY)),1)
	USING_SPIDERCONF=1
	NEED_SPIDERCONF=1
	ONLY_SPIDER=1
else
ifeq ($(strip $(BLAST_ONLY)),1)
	USING_BLASTCONF=1
	NEED_BLASTCONF=1
	ONLY_BLAST=1
else
ifeq ($(strip $(MINICP_ONLY)),1)
	USING_MINICONF=1
	NEED_MINICONF=1
	ONLY_MINICP=1
else
ifeq ($(strip $(NEED_CONFIG)),1)
	USING_BLASTCONF=1
	USING_SPIDERCONF=1
	USING_MINICONF=1
	NEED_CONF=1
endif
endif
endif
endif
endif
endif

ifeq ($(USING_BLASTCONF),1)
ifneq ($(ETC_DATA)$(BLAST_ETC_DATA),)
	USING_BLASTETC=1
endif
endif

ifeq ($(USING_SPIDERCONF),1)
ifneq ($(ETC_DATA)$(SPIDER_ETC_DATA),)
	USING_SPIDERETC=1
endif
endif

##########################################################
# Look for BLAST config
#

ifeq ($(USING_BLASTCONF),1)
REPO=BLASTCONF
NEEDREPO=$(NEED_BLASTCONF)
include ../common/Makefile.checkrepo
endif

##########################################################
# Look for MINICP config
#

ifeq ($(USING_MINICONF),1)
REPO=MINICONF
NEEDREPO=$(NEED_MINICONF)
include ../common/Makefile.checkrepo
endif

#########################################################
# Look for SPIDER config
#

ifeq ($(USING_SPIDERCONF),1)
REPO=SPIDERCONF
NEEDREPO=$(NEED_SPIDERCONF)
include ../common/Makefile.checkrepo
endif

#########################################################
# Make sure we have at least one experimental config,
# when needed.
#

ifeq ($(NEED_CONF),1)
ifeq ($(REMOTEPROJ),)
$(error No experimental configuration found.  Nothing to do)
endif
endif

##########################################################
# Look for BLAST data dir
#

ifeq ($(USING_BLASTETC),1)
REPO=BLASTETC
NEEDREPO=$(NEED_BLASTCONF)
include ../common/Makefile.checkrepo
endif

#########################################################
# Look for SPIDER data dir
#

ifeq ($(USING_SPIDERETC),1)
REPO=SPIDERETC
NEEDREPO=$(NEED_SPIDERCONF)
include ../common/Makefile.checkrepo
endif

#########################################################
# General configuration
#

REMOTEPROJ += $(SHARED)

CPPFLAGS := -I. -I../$(SHARED) $(CPPFLAGS)
BLAST_CPPFLAGS := -I../$(BLASTCONF) $(BLAST_CPPFLAGS) $(CPPFLAGS)
MINICP_CPPFLAGS := -I../$(MINICONF) $(MINICP_CPPFLAGS) $(CPPFLAGS)
SPIDER_CPPFLAGS := -I../$(SPIDERCONF) $(SPIDER_CPPFLAGS) $(CPPFLAGS)
BLAST_CFLAGS := $(CFLAGS) -D__BLAST__
MINCP_CFLAGS := $(CFLAGS) -D__MINICP__
SPIDER_CFLAGS := $(CFLAGS) -D__SPIDER__

ifeq ($(ONLY_BLAST),1)
	CPPFLAGS := $(BLAST_CPPFLAGS)
	CLAGS := $(BLAST_CLAGS)
else
ifeq ($(ONLY_MINICP),1)
	CPPFLAGS := $(MINICP_CPPFLAGS)
	CLAGS := $(MINICP_CLAGS)
else
ifeq ($(ONLY_SPIDER),1)
	CPPFLAGS := $(SPIDER_CPPFLAGS)
	CLAGS := $(SPIDER_CLAGS)
endif
endif
endif


#########################################################
# Fix file locations and consolidate
#

BLAST_OBJS := $(sort $(patsubst %.o,%_blast.o,$(EXPT_OBJS)) $(LOCAL_OBJS) \
	$(patsubst %.o,%_blast.o,$(SHARED_OBJS)))
SPIDER_OBJS := $(sort $(patsubst %.o,%_spider.o,$(EXPT_OBJS)) $(LOCAL_OBJS) \
	$(patsubst %.o,%_spider.o,$(SHARED_OBJS)))
MINICP_OBJS := $(sort $(patsubst %.o,%_minicp.o,$(EXPT_OBJS)) $(LOCAL_OBJS) \
	$(patsubst %.o,%_minicp.o,$(SHARED_OBJS)))
ifeq ($(ONLY_BLAST),1)
	OBJS := $(BLAST_OBJS)
else
ifeq ($(ONLY_SPIDER),1)
	OBJS := $(SPIDER_OBJS)
else
ifeq ($(ONLY_MINICP),1)
	OBJS := $(MINICP_OBJS)
else
	OBJS := $(sort $(LOCAL_OBJS) $(SHARED_OBJS))
endif
endif
endif

BLAST_HEADERS := $(sort $(LOCAL_HEADERS) \
	$(addprefix ../$(SHARED)/,$(SHARED_HEADERS)) \
	$(addprefix ../$(BLASTCONF)/,$(EXPT_HEADERS)))
MINICP_HEADERS := $(sort $(LOCAL_HEADERS) \
	$(addprefix ../$(SHARED)/,$(SHARED_HEADERS)) \
	$(addprefix ../$(MINICONF)/,$(EXPT_HEADERS)))
SPIDER_HEADERS := $(sort $(LOCAL_HEADERS) \
	$(addprefix ../$(SHARED)/,$(SHARED_HEADERS)) \
	$(addprefix ../$(SPIDERCONF)/,$(EXPT_HEADERS)))

ifeq ($(ONLY_BLAST),1)
	HEADERS := $(BLAST_HEADERS)
else
ifeq ($(ONLY_SPIDER),1)
	HEADERS := $(SPIDER_HEADERS)
else
ifeq ($(ONLY_MINICP),1)
	HEADERS := $(MINICP_HEADERS)
else
	HEADERS := $(sort $(LOCAL_HEADERS) \
		$(addprefix ../$(SHARED)/,$(SHARED_HEADERS)))
endif
endif
endif

ifneq ($(ETC_DATA)$(BLAST_ETC_DATA)$(SPIDER_ETC_DATA),)
	BLAST_ETC_DATA := $(addprefix ../$(BLASTETC)/,$(ETC_DATA) $(BLAST_ETC_DATA))
	SPIDER_ETC_DATA := $(addprefix ../$(SPIDERETC)/,$(ETC_DATA) \
		$(SPIDER_ETC_DATA))
ifeq ($(ONLY_BLAST),1)
	ETC_DATA := $(BLAST_ETC_DATA)
else
ifeq ($(ONLY_SPIDER),1)
	ETC_DATA := $(SPIDER_ETC_DATA)
else
endif
endif
endif

#########################################################
# Ensure all required headers are present (this also sets the
# default target)
#
#
all:: $(HEADERS)

.PHONY: all

#########################################################
# The rule for updating svn repositories
#

include ../common/Makefile.update

#########################################################
# Generic build rules
#

%.o: %.c $(HEADERS)
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ -c $<

%.o: %.cpp $(HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -o $@ -c $<

%.o: ../$(SHARED)/%.c $(HEADERS)
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ -c $<

%.o: ../$(SHARED)/%.cpp $(HEADERS)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -o $@ -c $<

%_blast.o: ../$(SHARED)/%.c $(HEADERS)
	$(CC) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_blast.o: ../$(SHARED)/%.cpp $(HEADERS)
	$(CXX) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_blast.o: ../$(BLASTCONF)/%.c $(HEADERS)
	$(CC) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_blast.o: ../$(BLASTCONF)/%.cpp $(HEADERS)
	$(CXX) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_blast.o: %.c $(HEADER)
	$(CC) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_blast.o: %.cpp $(HEADER)
	$(CXX) $(BLAST_CPPFLAGS) $(BLAST_CFLAGS) -o $@ -c $<

%_minicp.o: ../$(SHARED)/%.c $(HEADERS)
	$(CC) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_minicp.o: ../$(SHARED)/%.cpp $(HEADERS)
	$(CXX) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_minicp.o: ../$(MINICONF)/%.c $(HEADERS)
	$(CC) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_minicp.o: ../$(MINICONF)/%.cpp $(HEADERS)
	$(CXX) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_minicp.o: %.c $(HEADER)
	$(CC) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_minicp.o: %.cpp $(HEADER)
	$(CXX) $(MINICP_CPPFLAGS) $(MINICP_CFLAGS) -o $@ -c $<

%_spider.o: ../$(SHARED)/%.c $(HEADERS)
	$(CC) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

%_spider.o: ../$(SHARED)/%.cpp $(HEADERS)
	$(CXX) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

%_spider.o: ../$(SPIDERCONF)/%.c $(HEADERS)
	$(CC) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

%_spider.o: ../$(SPIDERCONF)/%.cpp $(HEADERS)
	$(CXX) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

%_spider.o: %.c $(HEADER)
	$(CC) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

%_spider.o: %.cpp $(HEADER)
	$(CXX) $(SPIDER_CPPFLAGS) $(SPIDER_CFLAGS) -o $@ -c $<

#######################################################3
