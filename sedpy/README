connectors:
LABEL -> MATE pins "description" alpha bcd M-mmate F-fmate
LABEL and MATE are connector labels, consisting of [A-Z0-9_]
pins is an integer: the number of pins of 0 for unlimited
description can be any string not containing "
alpha (alphanumeric pins) and bcd (just use N) are boolean: [yYnN]
mmate and fmate describe genders that male and female forms of the connector
  mate with: [mMfFxX] where X indicates the connector doesn't have that gender
when the connector list is done, add the line:
*ENDCONNECTORLIST

components:
CMP_NAME "Description of the Component" [< part_of]
CMP_NAME is short reference for component: [A-Z0-9_]
description contains anything but "
part_of (optinal) is reference for another component to which this one belongs

cables:
-most point-to-point (p2p) cables are generated in JACK declarations (below)
  only hydras and cables with differing connectors need explicit declaration
CABLE C## "description" [len]
declarations start with the word CABLE
C## is a cable reference, like CMP_NAME and most be different from all comonent
  references. It is an integer, optionally preceded with a C
description is like other descriptions above
len (optional) is the integer length in mm (negative or omitted means unknown)
-for some reason I declare cables last, there may be a good reason for this

-components and cables contain jacks and signal lines. JACK and LINE
  declarations are associated with the most recent cable or component
  -to add to a less recent one, add a declration containing only its reference

jacks:
JACK ref "label" conn/g -> dest_part[/jackref] [CABLE "[description]" [len]] 
ref is a string unique to jacks on the parent part: [a-z0-9_]
label describes the jack and can't contain "
conn/g specifies the connector type (its label) and gender ([mMfF]) of the jack
dest_part is the reference to a part where a matching jack can be found
  can optionally reference a jack on that part to resolve ambiguity (like of
  jacks of the same connector type between the same two components)
if a p2p cable joins the jacks, it is declared here. its description can be
  blank (ie "") to defer naming elsewhere, earliest description takes precedence
  and if not named anywhere, one is invented. len behaves like on normal cable

lines:
LINE "description" (jack,pin)[,(jack,pin), ...]
lines connect to one or more pins on one or more jacks
they start with a description (not containing ")
then have one or more (jack,pin) tuples: jack is a reference to a jack on the
  current component (or cable) and pin is a pin number on that jack. The signal
  line is connected to that pin on that jack for each such tuple.
lines can be automatically generated by lines with pins on a mating jack, but 
  this really only works when the line connects to just one pin

