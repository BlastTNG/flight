********************************************************************************
********************************************************************************
**----------------------------------------------------------------------------**
**|                                                                          |**
**|                        -------------------                               |**
**|                :::---  | R E D   B O O K |  ---:::                       |**
**|                        -------------------                               |**
**|                                                                          |**
**|                           CHAPTER VIIII                                  |**
**|       In Which The Reader Learns All About BLAST Software                |**
**|                                                                          |**
**|                                                                          |**
**----------------------------------------------------------------------------**
********************************************************************************
********************************************************************************







________________________________________________________________________________
================================================================================

        CONTENTS
________________________________________________________________________________
================================================================================




1       SUMMARY OF BLAST PROGRAMS

1.1     >>>mcp (on board flight control)
1.2     alice (downlink compression)
1.3     >>>kst (plotting, data viewing)
1.4     blastcmd (commanding)
1.4.1   narsil (blastcmd wrapper)
1.5     palantir (numerical display)


2       HOW DO I . . .

2.1     >>>Start data aquisition?
2.2     >>>Find a list of available fields?
2.3     >>>View data?
2.4     >>>Know that everything is working as it should be?
2.5     Send a command to the gondola?
2.6     Start TDRSS downlink and decompress on the ground?
2.7     Add a new command to blastcmd/narsil?
2.8     >>>Add a new field to the frames?
2.9     Display a new field in palantir?
2.10    Add a new field to the fast TDRSS downlink?
2.11    Add a new field to the slow TDRSS downlink?







________________________________________________________________________________
================================================================================

1       SUMMARY OF BLAST PROGRAMS
________________________________________________________________________________
================================================================================




--------------------------------------------------------------------------------
1.1     mcp (on board flight control)
--------------------------------------------------------------------------------

* Location: frodo:/usr/local/src/mcp
* Authors: Barth, Carrie, Don, Adam
* Brief description: on board, central control program for operation of the 
  gondala during flight
* Language: C
* Documentation: comments in code
* Meaning of Name: [m]aster [c]ontrol [p]rogram

The program has the following functions:
     - receives commands and information from the SIP
     - sends slow TDRSS downlink data
     - >>>>>>>> Barth fill in rest
     -

The program consists of the following files:
     - commands.c, command_struct.h, commands.h: parses out information
       from the SIP and polls it for GPS information; sends slow
     - dirfile.c: writes frames to disk
     - geomag.c, WWM.COF: magnetic field model and functions for determining
       B vector
     - mcp.c: contains the main()
     - starfind.c, sf.h: star finding code for the video star camera
     - tx.c, tx_struct.h, tx.h: talks to the ACS and DAS, information on frame
       structure


--------------------------------------------------------------------------------
1.2      alice (downlink compression)
--------------------------------------------------------------------------------

* Location: frodo:/usr/local/src/mcp/alice (compressor),
            boromir:/usr/local/src/alice   (decompressor),
            galadriel:/home/adam/backups/alice (backup)
* Author: Adam
* Brief description: compresses data on Frodo and decompresses the data stream
  on the ground
* Language: C++
* Documentation: there is a readme file in each directory
* Meaning of Name: "Alice in Wonderland" who is able to shrink and grow by
  eating and drinking certain things.

Alice consists of two programs, actually, big and small.  Small must reside on
Frodo and must be running at the same time as mcp.  It reads the data written by
mcp, compresses it, and sends it down at 6kbps via the SIP's TDRSS downlink. It
requires a serial connection with the "TDRSS High Rate" cable from the SIP.

Big resides on a ground computer plugged into the "Sci Data" serial connection.
It parses out all data from the SIP (this includes slow downlink data from
TDRSS) and writes the results to disk.

See the readme file for any further information.


--------------------------------------------------------------------------------
1.3      kst (plotting, data viewing)
--------------------------------------------------------------------------------

* Location:
* Author:
* Brief description:
* Language:
* Documentation:
* Meaning of Name:

>>>>>>>>>> Barth fill in


--------------------------------------------------------------------------------
1.4      blastcmd (commanding)
--------------------------------------------------------------------------------

* Location: boromir:/usr/local/src/blastcmd
            galadriel:/home/adam/backups/blastcmd (backup)
* Author: Adam, modified from earlier program by Barth
* Brief description: sends commands to the gondala via the SIP
* Language: C
* Documentation: comments in the code
* Meaning of Name: [blast] [c]o[m]ma[n]ding

Blastcmd needs to be running from a computer with the "Sci Commanding" serial
connection to the SIP.  The serial number is set by the macro INPUT_TTY in
blastcmd.c.

Commands are sent to the SIP in two byte packets.  Single commands can be fit
in a single packet, while multiple commands span several packets, with a start
and stop packet.  The details are briefly explained in the code comments and
should be fairly easy to figure out by looking at the code.

This program needs to be compiled with commands.h, which is also used by mcp
(above) and narsil (below).


--------------------------------------------------------------------------------
1.4.1    narsil (blastcmd wrapper)
--------------------------------------------------------------------------------

* Location: boromir:/usr/local/src/narsil
            galadriel:/home/adam/backups/narsil (backup)
* Author: Adam
* Brief description: graphical wrapper for blastcmd, easier to use
* Language: C++
* Documentation: readme file in directory, commented code
* Meaning of Name: Aragorn's sword ("Narsil essenya, macil meletya; Telchar
  carneron Navarotesse")

Narsil runs blastcmd (above) when users click on the "Send" button.  Please note
that Narsil needs to be recompiled with the latest version of commands.h for its
commanding to work properly.

See the readme file for more information.


--------------------------------------------------------------------------------
1.5      palantir (numerical display)
--------------------------------------------------------------------------------

* Location: boromir:/usr/local/src/palantir (source code)
            galadriel:/usr/local/src/palantir (no source code, but has the most
            recent default.pal file, as the program is run from here)
* Author: Adam
* Brief description: numerical display of data written to frames on disk
* Language: C++
* Documentation: readme file in directory, example.pal walkthrough in directory
* Meaning of Name: the "crystal balls" in LOTR are called palantirs; Sauruman
  owns one.  ("Unfortunately, so does Sauron," Barth says, "So use with care.")

I have tried to document palantir fairly exhaustively, so see the readme file 
and the comments in the code for any information.

Also be sure to check out the command line options ("./palantir --help") for
information on how to supress alarms when running.







________________________________________________________________________________
================================================================================

2       HOW DO I . . .
________________________________________________________________________________
================================================================================




--------------------------------------------------------------------------------
2.1     Start data aquisition?
--------------------------------------------------------------------------------

>>> Barth fill in


--------------------------------------------------------------------------------
2.2     Find a list of available fields?
--------------------------------------------------------------------------------

>>> Barth fill in


--------------------------------------------------------------------------------
2.3     View data?
--------------------------------------------------------------------------------

There are two programs for viewing data being written by the flight computer.
The first, which is designed to graph data, is kst.  The second, which displays
numerical values in a window, is palantir.

>>> Barth fill in for kst

To use palantir, go to the palantir directory (see 1.5), and start the program
by typing './palantir'.  Note that there are some useful command line options:
     -> -pca: uses the pc speaker if you have no sound card
     -> -noa: starts the program with all alarms disabled
Palantir shows the data as it is written to disk by mcp.  The graphic of the
palantir glows when there is new data being written, and becomes dim when there
is no downlink for some reason.  Palantir also will display erratic values in
jarring colours as well as play alarm sounds if things seem totally out of line.


--------------------------------------------------------------------------------
2.4     Know that everything is working as it should be?
--------------------------------------------------------------------------------

>>> Barth fill in


--------------------------------------------------------------------------------
2.5     Send a command to the gondala?
--------------------------------------------------------------------------------

First make sure that mcp is running so that commands can actually be received
(see 2.1).  Go to the narsil directory (see 1.4.1) and start the program by
typing './narsil'.  The operation of the program should be fairly 
self-explanitory.  You can verify that your commands have gone through by seeing
if the appropiate value has changed in palantir (see 2.3).  If values do not
change, try sending again -- the SIP simulator is kind of buggy sometimes.

You can also use blastcmd to send commands if you prefer just typing at the
command line (see 1.4).


--------------------------------------------------------------------------------
2.6     Start TDRSS downlink and decompress on the ground?
--------------------------------------------------------------------------------

Mcp must first be running (see 2.1).  Go to the alice directory on Frodo (see
1.2) and start compression program by typing './small'.  It is also important
that the SIP simulator be set to send data at 6kbps, which can be done from the
'TDRSS High Rate Monitor' window on the SIP simulator.

On the ground, go to the alice decompression directory (1.2) and start './big'. 
It will begin intercepting the compressed data and writing them to disk.  You
can view these data as you would view any other data with kst (see 2.3).  The
.cur file is /data/etc/alice.cur, and big also tells you which directory it is
writing frames to.


--------------------------------------------------------------------------------
2.7     Add a new command to blastcmd/narsil?
--------------------------------------------------------------------------------

* Go to the blastcmd directory (currently boromir:/usr/local/src/blastcmd) and
  open commands.h.
* To add a single command (i.e., passing no parameters):
     -> Increment the macro N_NM_SCOMMANDS by one.
     -> Add an entry to the structure "scommands":
          o name = UNIQUE three letter command
          o about = short description
          o group = for narsil, so it can group similar commands together.  You
            can add a new group at the top where the other group macros are
            defined if you need a new group.
* To add a multiple command (passing a certain number of parameters)
     -> Incrememnt the macro N_MCOMMANDS by one.
     -> Add an entry to the structure mcommands.  First the command:
          o name = UNIQUE three letter command
          o about = short description
          o group = see entry above
          o numparams = number of parameters. N.B: if the number of parameters
            you require is greater than MAX_N_PARAMS, be sure to increase
            MAX_N_PARAMS as necessary.
     -> List the parameters in a sub-structure
          o name = parameter discriptor
          o min/max = boundary values that can be passed; values outside this
            range cannot be sent
          o gain = parameter values are sent as integers; you may specify a gain
            here to convert a float to an integer
          o precision = number of decimal places for narsil to display (0 =
            integer)
          o field = name of a field in a frame from /data/etc/datafile.cur for
            Narsil to use for a default value
* Make blastcmd.  Go to /usr/local/src/narsil and make narsil.  (Narsil is
  currently configured to use the commands.h file in the blastcmd directory, so
  you need not copy it over.)
* Copy commands.h to frodo:/usr/local/src/mcp and go to this directory. There is
  a structure in mcp called "CommandData" to which incoming commands are written. 
  Open command_struct.h and add a variable to "struct CommandDataStruct" to which the command
  information can be written.
* Now open commands.c.
     -> For a single command, edit the function "SingleCommand"
     -> For a multiple command, edit the function "MultiCommand".  The parameter
        values are stored in the *values array, in the order in which they are
        entered in commands.h.  Remember to divide by the gain if necessary.
* Make mcp.


--------------------------------------------------------------------------------
2.8     Add a new field to the frames?
--------------------------------------------------------------------------------

>>> Barth
>>> Note that the decompressor needs tx.h and tx_struct.h up to date to create
the format file for the decompressed frames (boromir:/usr/local/src/alice)


--------------------------------------------------------------------------------
2.9     Add a new field to palantir?
--------------------------------------------------------------------------------

* Palantir gets all its information on start-up from default.pal if no file is
  specified in the command line.  You will usually just want to modify
  default.pal; you can also create a new file with a .pal extension to be
  entered on the command line (type ./palantir --help to see how).
* You should be able to figure out how to add a new field by looking at the
  other entries in the default.pal file.  You can also see example.pal which
  walks you through how to create a .pal file.


--------------------------------------------------------------------------------
2.10     Add a new field to the fast TDRSS downlink?
--------------------------------------------------------------------------------

* See the readme file in /usr/local/src/alice on boromir or frodo.  It tells you
  (1.1) which files must be identical on both Frodo and the ground computer
  (currently Boromir).  It also explains how the .al files are used to specify
  which fields are compressed (1.1.1).
* Edit the appropiate .al file
* Make sure the .al files are the same on Frodo and on the ground


--------------------------------------------------------------------------------
2.11    Add a new field to the slow TDRSS downlink?
--------------------------------------------------------------------------------

* Open command_struct.h on frodo:/usr/local/src/mcp and increment the macro 
  SLOWDL_NUM_DATA by one.  Then open commands.c.
* Add an entry to struct SlowDL_glob SlowDLInfo
     -> src = name of field to take the datum from
     -> type = how to compress the datum
          o TAKEBIT: sends down bit number N from the datum, where N is
            specified in the next element of the struct, numbits
          o FORCEINT: rounds the value to an integer, which is fitted into
            numbits (numbits is the next element of the struct).  If the integer
            can't fit in numbits, this is indicated with reserved values which
            are intepreted by the decompressor (alice on the ground, big).
          o U_MASK: send down the bottom N bits from the value (e.g. 10011010
            with N=4 would send 1010), where N is numbits, the next element of
            the	struct
               -> numbits = see above
               -> all other entries set to -1
     * N.B.: only 37 bytes can be sent down.  Make sure that all the numbits do 
       not exceed 37 x 7 (TAKEBIT uses one bit, obviously).
* Copy the struct SlowDL_glob SlowDLInfo into the code of big.cpp on the ground
  computer (currently in boromir:/usr/local/src/alice), as big needs to know
  what to look for in the slow TDRSS downlink.
