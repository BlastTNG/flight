Index: src/cow.cpp
===================================================================
--- src/cow.cpp	(revision 6665)
+++ src/cow.cpp	(revision 6680)
@@ -430,7 +430,7 @@
 //      as appropiate for the command.
 //-------------------------------------------------------------
 
-void MainForm::ChooseCommand() {
+void MainForm::ChooseCommand(bool index_combo_changed, int combo_index) {
   int i, index;
   double indata;
 
@@ -446,7 +446,7 @@
   }
 
   // It can happen that this function be called with nothing selected
-  if (!NCommandList->currentIndex().isValid() || (!NCommandList->hasFocus()&&!NOmniBox->hasFocus())) {
+  if (!index_combo_changed && (!NCommandList->currentIndex().isValid() || (!NCommandList->hasFocus()&&!NOmniBox->hasFocus()))) {
     NSendButton->setDisabled(true);
     lastmcmd = -1;
     NAboutLabel->setText(tr("No command selected."));
@@ -476,8 +476,10 @@
 
       //bool IsData = DataSource->update();
 
+      int index_serial = 0;
       for (i = 0; i < MAX_N_PARAMS; i++) {
         if (i < client_mcommands[index].numparams) {
+
           NParamLabels[i]->setText(client_mcommands[index].params[i].name);
           NParamLabels[i]->show();
 
@@ -493,6 +495,9 @@
             typeChanged=1;
             delete NParamFields[i];
             cce=new CowComboEntry(NTopFrame,"NParamLabels");
+            if (client_mcommands[index].params[i].index_serial) {
+              connect(cce, SIGNAL(activated(int)), this, SLOT(IndexComboChanged(int)));
+            }
             NParamFields[i] = cce;
             for (int i_par = 0; client_mcommands[index].params[i].nt[i_par] != 0; i_par++) {
               cce->addItem(client_mcommands[index].params[i].nt[i_par]);
@@ -524,17 +529,39 @@
                 client_mcommands[index].params[i].field);
           } else {
             int nf;
-            if ((nf = _dirfile->NFrames())>0) {
-              if (_dirfile->GetData( client_mcommands[index].params[i].field,
+            if (client_mcommands[index].params[i].index_serial) {
+              int i_s = client_mcommands[index].params[i].index_serial;
+              if (index_combo_changed) {
+                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetDefaultValue(index, i);
+                index_defaults.insert(i_s, dynamic_cast<AbstractCowEntry*>(NParamFields[i])->Text().toInt());
+              } else {
+                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetIndex(index_defaults.value(i_s, client_mcommands[index].params[i].min));
+                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->RecordDefaults();
+                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetDefaultValue(index, i);
+              }
+            } else if (((nf = _dirfile->NFrames())>0) && (_dirfile->GetData( client_mcommands[index].params[i].field,
                     nf-1, 0, 0, 1, // 1 sample from frame nf-1
-                    Float64, (void*)(&indata))==0) {
+                    Float64, (void*)(&indata))!=0)) {
+              dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetValue(indata);
+            } else {
+              double d;
+              char cmdstr[SIZE_CMDPARNAME];
+              if (index_serial) {
+                sprintf(cmdstr, "%s;%d;%s", client_mcommands[index].name, index_serial, client_mcommands[index].params[i].name);
+              } else {
+                // FIXME: index parameter
+                sprintf(cmdstr, "%s;%s", client_mcommands[index].name, client_mcommands[index].params[i].name);
+              }
+              d = NetCmdGetDefault(cmdstr);
+              if ((d == DEF_NOT_FOUND) || (client_mcommands[index].params[i].index_serial)) {
                 dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetDefaultValue(index, i);
               } else {
-                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetValue(indata);
+                dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetValue(d);
               }
-            } else {
-              dynamic_cast<AbstractCowEntry*>(NParamFields[i])->SetDefaultValue(index, i);
             }
+            if (client_mcommands[index].params[i].index_serial>0) {
+              index_serial = dynamic_cast<AbstractCowEntry*>(NParamFields[i])->Text().toInt();
+            }
           }
         } else {
           NParamLabels[i]->hide();
Index: src/widgets.h
===================================================================
--- src/widgets.h	(revision 6665)
+++ src/widgets.h	(revision 6680)
@@ -66,6 +66,7 @@
     virtual void SetType(char t)=0;
     virtual void SetValue(double d)=0;
     virtual void SetStringValue(QString s)=0;
+    virtual void SetIndex(int i) {Q_UNUSED(i)}
     virtual QString Text() const=0;
 protected:
     int command, param;
@@ -141,6 +142,11 @@
       SetValue(i);
     }
 
+    virtual void SetIndex(int i)
+    {
+      setCurrentIndex(i);
+    }
+
     QString Text() const
     {
 
Index: src/cow.h
===================================================================
--- src/cow.h	(revision 6665)
+++ src/cow.h	(revision 6680)
@@ -43,6 +43,7 @@
 #include <QLineEdit>
 #include <limits>
 #include <limits.h>
+#include <QMap>
 
 #include <sys/types.h>
 
@@ -173,11 +174,14 @@
     int dir;
     QPixmap *Images[6];
 
+    QMap<int,int> index_defaults;
+
 public slots:
     void OmniParse(QString filter="__AUTODETECT__");
     void OmniSync();
     void ChangeCommandList(bool really=true);
-    void ChooseCommand();
+    void IndexComboChanged(int i) {ChooseCommand(true, i);}
+    void ChooseCommand(bool index_combo_changed=false, int combo_index = 0);
     void Quit();
     void SendCommand();
     void Tick();
