#!/usr/bin/perl -w

open INPUT, "<tx_struct.h" or die "ERROR: Unable to open tx_struct.h";
open STDOUT, ">all.channel.list" or die "ERROR: Cannot write to all.channel.list";
print "# ALL CHANNEL LIST\n#   This file is automatically generated by all.channels based on the contents\n#   of tx_struct.h and tx_struct.c\n#\n#\n# HEADER DEFINITIONS FOLLOW:\n";

while (<INPUT>) {
  if (!$FAST_PER_SLOW and ($FAST_PER_SLOW) = /#define FAST_PER_SLOW [^0-9]*([0-9]*)/) {
    print "# fast samples per slow (FAST_PER_SLOW): ", $FAST_PER_SLOW, "\n";
  } elsif (!$ENC_ELEV_OFFSET and ($ENC_ELEV_OFFSET) = /#define ENC_ELEV_OFFSET [^0-9]*([0-9.]*)/) {
    print "# encoder elevation offset (ENC_ELEV_OFFSET): ", $ENC_ELEV_OFFSET, "\n";
  } elsif (!$N_SLOW and ($N_SLOW) = /#define N_SLOW [^0-9]*([0-9]*)/) {
    print "# slow fields (N_SLOW): ", $N_SLOW, "\n";
  } elsif (!$DAS_CARDS and ($DAS_CARDS) = /#define DAS_CARDS [^0-9]*([0-9]*)/) {
    print "# DAS cards in frame (DAS_CARDS): ", $DAS_CARDS, "\n";
  } elsif (!$DAS_CHS and ($DAS_CHS) = /#define DAS_CHS [^0-9]*([0-9]*)/) {
    print "# channels in one DAS card (DAS_CHS): ", $DAS_CHS, "\n";
  } elsif (!$N_FASTCHLIST_INIT_ACS and ($N_FASTCHLIST_INIT_ACS) = /#define N_FASTCHLIST_INIT_ACS [^0-9]*([0-9]*)/) {
    print "# ACS fields in the frame below the DAS bolometer fields (N_FASTCHLIST_INIT_ACS): ", $N_FASTCHLIST_INIT_ACS, "\n";
  } elsif (!$N_FASTCHLIST_INIT_DAS and ($N_FASTCHLIST_INIT_DAS) = /#define N_FASTCHLIST_INIT_DAS [^0-9]*([0-9]*)/) {
    $N_FASTCHLIST_INIT = $N_FASTCHLIST_INIT_ACS + $N_FASTCHLIST_INIT_DAS;
    print "# DAS fields in the frame below the DAS bolometer fields (N_FASTCHLIST_INIT_DAS): ", $N_FASTCHLIST_INIT_DAS, "\n";
    print "# fields in the frame below the DAS bolometer fields (N_FASTCHLIST_INIT_DAS): ", $N_FASTCHLIST_INIT, "\n";
  } elsif (($DEG2I) = /#define DEG2I (.*)/) {
    $DEG2I = eval($DEG2I);
    $I2DEG = 1/$DEG2I;
    last;
  }
}

print "# fast fields (N_FASTCHLIST): ", $N_FASTCHLIST_INIT + $DAS_CARDS * 1.5 * $DAS_CHS, "\n" if (defined $N_FASTCHLIST_INIT and defined $DAS_CARDS and defined $DAS_CHS);

print "# fast channel list offset (FAST_OFFSET): ", $FAST_OFFSET = 4 + $N_SLOW,
      "\n" if (defined $N_SLOW);

open INPUT, "<tx_struct.c" or die "ERROR: Unable to open tx_struct.c";

while (<INPUT>) {
  if (/#define LOOPBACK ([0-9])/) {
    $LOOPBACK = $1;
  } elsif (/#define SPARE ([0-9])/) {
    $SPARE = $1;
  } elsif ($slowlist) {
    if (@record =
        /^[^\/\*]*{"(.*)" *, *'(.)' *, *(.*) *, *(.*) *, *(.*) *, *(.*) *, *'(.)' *}/) {
      @record = ($slowch, $slowind, @record);
      $record[4] = $LOOPBACK if ($record[4] eq "LOOPBACK");
      $record[4] = $SPARE if ($record[4] eq "SPARE");
      if ($record[2] ne "") {
        $record[6] =~ s/I2DEG/$I2DEG/g;
        $record[6] = eval($record[6]);
        $record[7] = eval($record[7]);
        printf "  %1i %2i  %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @record;
        push @recs, [ @record ];
      }
      $slowind++;
    } elsif (/^[^\/\*{]*},/) {
      $slowch++;
      $slowind = 0;
    } elsif (/^[^\/\*{]*};/) {
      $slowlist = 0;
    }
  } elsif ($fastlist) {
    if (@record =
        /^[^\/\*]*{"(.*)" *, *'(.)' *, *(.*) *, *(.*) *, *(.*) *, *(.*) *, *'(.)' *}/) {
      @record = (-1, $fastind, @record);
      $record[4] = $LOOPBACK if ($record[4] eq "LOOPBACK");
      $record[4] = $SPARE if ($record[4] eq "SPARE");
      if ($record[2] ne "" and $record[2] ne "ENDMARKER") {
        $record[6] =~ s/I2DEG/$I2DEG/g;
        $record[6] =~ s/ENC_ELEV_OFFSET/$ENC_ELEV_OFFSET/g;
        $record[7] =~ s/ENC_ELEV_OFFSET/$ENC_ELEV_OFFSET/g;
        $record[6] = eval($record[6]);
        $record[7] = eval($record[7]);
        push @recs, [ @record ];
        (undef, @record) = @record;
        printf "  %3i   %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @record;
      }
      $fastind++ if ($record[1] ne "ENDMARKER");
    } elsif (/^[^\/\*{]*};/) {
      $fastlist = 0;
    }
  } else {
    if (/struct ChannelStruct SlowChList.*= {/) {
      $slowlist = 1;
      print "#\n#\n# SLOW CHANNEL LIST\n# indx ----- field name ---- r/w node adr -------- m -------  ------- b -------- type\n";
      $slowch  = 0;
      $slowind = 0;
    } elsif (/struct ChannelStruct FastChList.*= {/) {
      $fastlist = 1;
      print "#\n#\n# FAST CHANNEL LIST\n# indx ----- field name ---- r/w node adr -------- m -------  ------- b -------- type\n";
      $fastind = $FAST_OFFSET;
    } elsif (($dasm, $dasb) = /struct ChannelStruct channel = {"", 'r', 3, 0, *(.*) *, *(.*) *, 'u'};/) {
      @record = (-1, -1, "n?c?", 'r', -1, -1, $dasm, $dasb, 'u');
      push @recs, [ @record ];
      (undef, @record) = @record;
      printf "  %3i   %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @record;

      open STDOUT, ">all.channel.list.alpha" or die "ERROR: Cannot write to all.channel.list.alpha";
			print "# ALL CHANNEL LIST\n#   This file is automatically generated by all.channels based on the contents\n#   of tx_struct.h and tx_struct.c\n#\n#\n";
      print "#\n#\n# ALPHABETICAL LIST\n# indx ----- field name ---- r/w node adr -------- m -------  ------- b -------- type\n";
      @sorted = sort {$$a[2] cmp $$b[2]} @recs;
      for (@sorted) {
        if ($$_[0] == -1) {
          (undef, @record) = @$_;
          printf "  %3i   %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @record;
        } else {
          printf "  %1i %2i  %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @$_;
        }
      }

			open STDOUT, ">all.channel.list.node" or die "ERROR: Cannot write to all.channel.list.node";
			print "# ALL CHANNEL LIST\n#   This file is automatically generated by all.channels based on the contents\n#   of tx_struct.h and tx_struct.c\n#\n#\n";
      print "#\n#\n# NODE/CHANNEL LIST\n# indx ----- field name ---- r/w node adr -------- m -------  ------- b -------- type\n";
      @sorted = sort {
					(($$a[3] eq 'w') ? 100 : 0) + $$a[4] * 100000 + $$a[5] <=>
					(($$b[3] eq 'w') ? 100 : 0) + $$b[4] * 100000 + $$b[5]
				} @recs;
      for (@sorted) {
        if ($$_[0] == -1) {
          (undef, @record) = @$_;
          printf "  %3i   %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @record;
        } else {
          printf "  %1i %2i  %-20s  %1s   %2i  %2i  %18g  %18g  %s\n", @$_;
        }
      }
    }
  }
 }
